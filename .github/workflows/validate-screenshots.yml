name: Validate Compose Screenshots (Ubuntu)

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      API_LEVEL: "31"
      AVD_NAME: "ci_avd"
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      JAVA_VERSION: "17"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/gradle.lockfile', '**/gradle/libs.versions.toml', '**/gradle.properties') }}
          restore-keys: |
            gradle-cache-${{ runner.os }}-

      - name: Install Android cmdline-tools & SDK (Ubuntu)
        run: |
          set -euxo pipefail

          SDK_ROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"

          TOOLS_ZIP="commandlinetools-linux-9477386_latest.zip"
          TOOLS_URL="https://dl.google.com/android/repository/${TOOLS_ZIP}"

          if [ ! -f "$TOOLS_ZIP" ]; then
            echo "Downloading $TOOLS_URL"
            curl -fsSL -o "$TOOLS_ZIP" "$TOOLS_URL"
          else
            echo "$TOOLS_ZIP already present"
          fi

          rm -rf cmdline-tools-temp
          unzip -q -o "$TOOLS_ZIP" -d cmdline-tools-temp

          # Replace existing latest atomically
          rm -rf cmdline-tools/latest
          mkdir -p cmdline-tools
          mv cmdline-tools-temp/cmdline-tools cmdline-tools/latest
          rm -rf cmdline-tools-temp

          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$SDK_ROOT/platform-tools:$SDK_ROOT/emulator:$PATH"

          # Accept licenses (best-effort)
          yes | sdkmanager --licenses || true

          API_LEVEL="${API_LEVEL}"
          SYS_IMG_PKG="system-images;android-${API_LEVEL};google_apis;x86_64"

          # Install minimal packages
          sdkmanager --install "platform-tools" "platforms;android-${API_LEVEL}" "build-tools;33.0.2" "$SYS_IMG_PKG"
        shell: bash
        timeout-minutes: 30

      - name: Verify adb available
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:$PATH"
          adb version
        shell: bash

      - name: Create & start AVD (Ubuntu, x86_64)
        run: |
          set -euxo pipefail
          export PATH="${ANDROID_SDK_ROOT}/emulator:${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}"

          AVD="${AVD_NAME}"
          SYS_IMG_PKG="system-images;android-${API_LEVEL};google_apis;x86_64"
          DEVICE_NAME="pixel"

          # Remove existing AVD if present
          if avdmanager list avd | grep -q "^Name: ${AVD}$"; then
            echo "Deleting existing AVD ${AVD}"
            yes | avdmanager delete avd -n "$AVD" || true
          fi

          # Create AVD non-interactively (answer "no" to custom hardware prompt)
          echo "no" | avdmanager create avd --force --name "$AVD" --package "$SYS_IMG_PKG" --device "$DEVICE_NAME"

          # Start emulator in background
          nohup emulator -avd "$AVD" -no-window -no-audio -no-boot-anim -wipe-data > emulator.log 2>&1 &
          EMU_PID=$!
          echo "Emulator launched (pid $EMU_PID). Waiting for adb to list device..."

          # wait for emulator to appear to adb
          for i in $(seq 1 120); do
            if adb devices | grep -q '^emulator-'; then
              break
            fi
            echo "waiting for adb listing ($i)..."
            sleep 1
          done

          EMU_ID=$(adb devices | awk '/^emulator-/ {print $1; exit}' || true)
          if [ -z "$EMU_ID" ]; then
            echo "No emulator device found. Dumping emulator.log and adb devices:"
            tail -n 200 emulator.log || true
            adb devices -l || true
            exit 1
          fi
          echo "Found emulator id: $EMU_ID"

          adb -s "$EMU_ID" wait-for-device

          # Wait for boot completion (long timeout)
          for i in $(seq 1 600); do
            BOOT=$(adb -s "$EMU_ID" shell getprop sys.boot_completed 2>/dev/null || echo "")
            if [ "$BOOT" = "1" ]; then
              echo "Boot completed"
              break
            fi
            echo "still booting ($i)..."
            sleep 2
          done

          # If emulator not booted, dump logs and fail
          BOOT_TEST=$(adb -s "$EMU_ID" shell getprop sys.boot_completed 2>/dev/null || echo "")
          if [ "$BOOT_TEST" != "1" ]; then
            echo "Emulator did not boot in time. Dumping last lines of emulator.log:"
            tail -n 200 emulator.log || true
            adb devices -l || true
            exit 1
          fi

          # Disable animations for speed
          adb -s "$EMU_ID" shell settings put global window_animation_scale 0
          adb -s "$EMU_ID" shell settings put global transition_animation_scale 0
          adb -s "$EMU_ID" shell settings put global animator_duration_scale 0

          echo "Emulator ready; devices:"
          adb devices -l
        shell: bash
        timeout-minutes: 40

      - name: regenerate screenshots
        run: |
          set -euxo pipefail
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:$PATH"
          ./gradlew --no-daemon --console=plain updateDebugScreenshotTest
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        shell: bash
        timeout-minutes: 30

      - name: Upload generated screenshots & reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: |
            app/src/debug/screenshotTest/reference/**
            app/build/reports/**
            app/build/test-results/**

      - name: Stop emulator (best-effort)
        if: always()
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:$PATH"
          adb -s emulator-5554 emu kill || true
        shell: bash
