name: Android Emulator — Validate Compose Screenshots

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  emulator-screenshots:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*','**/gradle/*.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 31
          target: google_apis

      - name: Assemble app and androidTest APKs
        run: ./gradlew assembleDebug assembleAndroidTest --no-daemon

      - name: Start emulator & validate screenshots
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          target: google_apis
          arch: x86_64
          profile: "Nexus 6"
          emulator-options: -no-audio -no-boot-anim
          script: |
            set -e
            echo "wait for device..."
            adb wait-for-device

            # unlock / ensure display on
            adb shell input keyevent 82 || true
            adb shell settings put global window_animation_scale 0.0 || true
            adb shell settings put global transition_animation_scale 0.0 || true
            adb shell settings put global animator_duration_scale 0.0 || true

            echo "Install APKs (adjust paths if your module isn't 'app')"
            APP_APK=app/build/outputs/apk/debug/app-debug.apk
            TEST_APK=app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

            if [ ! -f "$APP_APK" ]; then echo "App APK not found at $APP_APK" && ls -R app/build/outputs/apk && exit 1; fi
            if [ ! -f "$TEST_APK" ]; then echo "Test APK not found at $TEST_APK" && ls -R app/build/outputs/apk && exit 1; fi

            adb install -r "$APP_APK"
            adb install -r "$TEST_APK"
            sleep 2

            echo "Stop any running Gradle daemons and run the validate screenshot task"
            ./gradlew --stop || true

            # Run the validate task — this typically requires a connected device/emulator.
            # Replace ':app:validateDebugScreenshotTest' with your exact task path if different.
            ./gradlew :app:validateDebugScreenshotTest --no-daemon --stacktrace || true

            echo "Give filesystem a moment to flush screenshots"
            sleep 2

            mkdir -p $GITHUB_WORKSPACE/screenshot-output

            # Typical screenshot locations — adjust if your test writes elsewhere
            adb pull /sdcard/screenshots $GITHUB_WORKSPACE/screenshot-output/ || true
            adb pull /sdcard/Android/data/${{ env.APP_ID }}/files $GITHUB_WORKSPACE/screenshot-output/ || true
            adb pull /sdcard/Android/data/${{ env.APP_ID }} $GITHUB_WORKSPACE/screenshot-output/ || true

            echo "List pulled files"
            ls -la $GITHUB_WORKSPACE/screenshot-output || true

      - name: Upload screenshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compose-screenshots
          path: screenshot-output

      - name: Print device log tail (always)
        if: always()
        run: adb logcat -d | tail -n 200 || true
