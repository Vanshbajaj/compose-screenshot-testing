name: Validate Compose Screenshots (Ubuntu)

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      API_LEVEL: "31"
      AVD_NAME: "ci_avd"
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      JAVA_VERSION: "17"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install prerequisites (native libs for emulator)
        run: |
          sudo dpkg --add-architecture i386 || true
          sudo apt-get update
          sudo apt-get install -y unzip curl libc6:i386 libstdc++6:i386 zlib1g:i386 libglu1-mesa libpulse0
        shell: bash

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install Android command-line tools + minimal SDK (Linux)
        run: |
          set -euxo pipefail
          SDK_ROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"
          PLAT="linux"
          TOOLS_ZIP="commandlinetools-${PLAT}-9477386_latest.zip"
          TOOLS_URL="https://dl.google.com/android/repository/${TOOLS_ZIP}"
          if [ ! -f "$TOOLS_ZIP" ]; then
            echo "Downloading $TOOLS_URL"
            curl -fsSL -o "$TOOLS_ZIP" "$TOOLS_URL"
          else
            echo "$TOOLS_ZIP already present"
          fi
          rm -rf cmdline-tools-temp
          unzip -q -o "$TOOLS_ZIP" -d cmdline-tools-temp
          rm -rf cmdline-tools/latest
          mkdir -p cmdline-tools
          mv cmdline-tools-temp/cmdline-tools cmdline-tools/latest
          rm -rf cmdline-tools-temp
          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          printf '\n' | sdkmanager --licenses || true
          sdkmanager --install "platform-tools" "platforms;android-${API_LEVEL}" "build-tools;33.0.2" || true
        shell: bash
        timeout-minutes: 20

      - name: Verify adb available
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:$PATH"
          adb version
        shell: bash

      - name: Install google_apis x86_64 system image
        run: |
          set -euxo pipefail
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}"
          SYS_IMG="system-images;android-${API_LEVEL};google_apis;x86_64"
          if sdkmanager --list | grep -q "$SYS_IMG"; then
            echo "$SYS_IMG already present"
          else
            printf '\n' | sdkmanager --install "$SYS_IMG" || true
          fi
        shell: bash
        timeout-minutes: 20

      - name: Create & start AVD (x86_64, no window)
        run: |
          set -euxo pipefail
          export PATH="${ANDROID_SDK_ROOT}/emulator:${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}"
          AVD="$AVD_NAME"
          SYS_IMG="system-images;android-${API_LEVEL};google_apis;x86_64"
          DEVICE="pixel"
          if avdmanager list avd | grep -q "^Name: ${AVD}$"; then
            echo "Deleting existing AVD ${AVD}"
            yes | avdmanager delete avd -n "$AVD" || true
          fi
          echo "no" | avdmanager create avd --force --name "$AVD" --package "$SYS_IMG" --device "$DEVICE"
          nohup emulator -avd "$AVD" -no-window -no-audio -no-boot-anim -gpu swiftshader_indirect -wipe-data > emulator.log 2>&1 &
          EMU_PID=$!
          echo "emulator pid: $EMU_PID"
          ADB="${ANDROID_SDK_ROOT}/platform-tools/adb"
          $ADB kill-server || true
          $ADB start-server
          for i in {1..120}; do
            if $ADB devices | grep -q '^emulator-'; then
              echo "emulator listed in adb"
              break
            fi
            echo "waiting for adb listing ($i)..."
            sleep 1
          done
          EMU_ID=$($ADB devices | awk '/^emulator-/ {print $1; exit}' || true)
          if [ -z "$EMU_ID" ]; then
            echo "No emulator device found. Dump emulator.log and adb devices:"
            tail -n 200 emulator.log || true
            $ADB devices -l || true
            exit 1
          fi
          echo "Using device id: $EMU_ID"
          $ADB -s "$EMU_ID" wait-for-device
          BOOTED=""
          DEV_BOOT=""
          BOOT_ANIM=""
          for i in {1..600}; do
            BOOTED=$($ADB -s "$EMU_ID" shell getprop sys.boot_completed 2>/dev/null || echo "")
            if [ "$BOOTED" = "1" ]; then
              echo "sys.boot_completed=1"
              break
            fi
            DEV_BOOT=$($ADB -s "$EMU_ID" shell getprop dev.bootcomplete 2>/dev/null || echo "")
            BOOT_ANIM=$($ADB -s "$EMU_ID" shell getprop init.svc.bootanim 2>/dev/null || echo "")
            if [ "$DEV_BOOT" = "1" ] || [ "$BOOT_ANIM" = "stopped" ]; then
              echo "Fallback boot ok: dev.bootcomplete=$DEV_BOOT, bootanim=$BOOT_ANIM"
              break
            fi
            if ! kill -0 $EMU_PID 2>/dev/null; then
              echo "Emulator process died. Dump emulator.log:"
              tail -n 200 emulator.log || true
              $ADB devices -l || true
              exit 1
            fi
            if (( i % 30 == 0 )); then
              echo "still booting ($i); tail emulator.log:"
              tail -n 50 emulator.log || true
            fi
            sleep 2
          done
          if [ "$BOOTED" != "1" ] && [ "$DEV_BOOT" != "1" ] && [ "$BOOT_ANIM" != "stopped" ]; then
            echo "Emulator did not boot in time. Dump emulator.log + adb devices:"
            tail -n 200 emulator.log || true
            $ADB devices -l || true
            exit 1
          fi
          $ADB -s "$EMU_ID" shell settings put global window_animation_scale 0
          $ADB -s "$EMU_ID" shell settings put global transition_animation_scale 0
          $ADB -s "$EMU_ID" shell settings put global animator_duration_scale 0
          echo "Emulator ready"
        shell: bash
        timeout-minutes: 30

      - name: Show ADB devices (debug)
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          adb devices -l
        shell: bash

      - name: validate screenshots
        run: ./gradlew --no-daemon --console=plain validateDebugScreenshotTest
        timeout-minutes: 30

      - name: Upload artifacts (screenshots & reports)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: |
            app/src/debug/screenshotTest/reference/**
            app/build/reports/**
            app/build/test-results/**

      - name: Kill emulator (best-effort)
        if: always()
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          adb -s emulator-5554 emu kill || true
        shell: bash
