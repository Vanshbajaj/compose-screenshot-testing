name: Validate Compose Screenshots (macOS, default system image)

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

jobs:
  validate:
    runs-on: macos-latest
    env:
      API_LEVEL: "35"
      AVD_NAME: "Test_AVD"
      ANDROID_SDK_ROOT: /Users/runner/Library/Android/sdk
      ANDROID_HOME: /Users/runner/Library/Android/sdk
      JAVA_VERSION: "17"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install Google's command-line tools + SDK (minimal)
        run: |
          set -euxo pipefail
          SDK_ROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"

          PLAT="mac"
          TOOLS_ZIP="commandlinetools-${PLAT}-9477386_latest.zip"
          TOOLS_URL="https://dl.google.com/android/repository/${TOOLS_ZIP}"

          if [ ! -f "$TOOLS_ZIP" ]; then
            echo "Downloading $TOOLS_URL"
            curl -fsSL -o "$TOOLS_ZIP" "$TOOLS_URL"
          else
            echo "$TOOLS_ZIP already present"
          fi

          rm -rf cmdline-tools-temp
          unzip -q -o "$TOOLS_ZIP" -d cmdline-tools-temp

          # Replace existing latest atomically
          rm -rf cmdline-tools/latest
          mkdir -p cmdline-tools
          mv cmdline-tools-temp/cmdline-tools cmdline-tools/latest
          rm -rf cmdline-tools-temp

          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # Accept licenses robustly (ignore non-zero exit)
          yes | sdkmanager --licenses || true

          # Install minimal packages: platform-tools, platforms, build-tools and default system image
          sdkmanager --install "platform-tools" \
                       "platforms;android-${API_LEVEL}" \
                       "build-tools;33.0.2" \
                       "system-images;android-${API_LEVEL};default;x86_64"
        shell: bash
        timeout-minutes: 20

      - name: Verify adb available
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:$PATH"
          adb version
        shell: bash

      - name: Create & start AVD (default system image)
        run: |
          set -euxo pipefail
          export PATH="${ANDROID_SDK_ROOT}/emulator:${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}"
          AVD="${AVD_NAME}"

          # Delete any existing AVD with same name
          avdmanager list avd | grep -q "$AVD" && yes | avdmanager delete avd -n "$AVD" || true

          # Create AVD using the 'default' x86_64 system image we installed
          # 'echo "no"' answers "Do you wish to create a custom hardware profile?" with "no"
          echo "no" | avdmanager create avd --force --name "$AVD" \
            --package "system-images;android-${API_LEVEL};default;x86_64" \
            --device "pixel"

          # Start emulator in background using host GPU for macOS (faster)
          nohup emulator -avd "$AVD" -no-window -no-audio -no-boot-anim -wipe-data > emulator.log 2>&1 &

          # wait for emulator to appear to adb
          for i in {1..60}; do
            if adb devices | grep -q emulator-; then
              break
            fi
            sleep 1
          done

          # wait for boot completion
          for i in {1..600}; do
            BOOT=$(adb -s emulator-5554 shell getprop sys.boot_completed 2>/dev/null || echo "")
            if [ "$BOOT" = "1" ]; then
              echo "booted"
              break
            fi
            echo "waiting for boot ($i)..."
            sleep 2
          done

          # disable animations for speed
          adb -s emulator-5554 shell settings put global window_animation_scale 0
          adb -s emulator-5554 shell settings put global transition_animation_scale 0
          adb -s emulator-5554 shell settings put global animator_duration_scale 0

          adb devices -l
        shell: bash
        timeout-minutes: 30




      - name: Kill emulator (best-effort)
        if: always()
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          adb -s emulator-5554 emu kill || true
        shell: bash
