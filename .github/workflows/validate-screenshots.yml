name: Validate Compose Screenshots (Google-only)

on:
  workflow_dispatch:
  push:
    branches:
      - "*"

jobs:
  validate:
    runs-on: macos-latest
    env:
      API_LEVEL: "31"
      AVD_NAME: "ci_google_avd"
      ANDROID_SDK_ROOT: /Users/runner/Library/Android/sdk
      ANDROID_HOME: /Users/runner/Library/Android/sdk
      JAVA_VERSION: "17"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install Google's command-line tools and SDK (minimal)
        run: |
          set -euxo pipefail
          SDK_ROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"

          # download Google command line tools for mac (idempotent)
          TOOLS_ZIP="commandlinetools-mac-9477386_latest.zip"
          if [ ! -f "$TOOLS_ZIP" ]; then
            curl -fsSL -o "$TOOLS_ZIP" "https://dl.google.com/android/repository/${TOOLS_ZIP}"
          fi

          rm -rf cmdline-tools-temp
          unzip -q -o "$TOOLS_ZIP" -d cmdline-tools-temp

          # atomically replace latest
          rm -rf cmdline-tools/latest
          mkdir -p cmdline-tools
          mv cmdline-tools-temp/cmdline-tools cmdline-tools/latest
          rm -rf cmdline-tools-temp

          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # accept licenses and install minimal packages (platform-tools + platforms + google_apis system-image)
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "platforms;android-${API_LEVEL}" "system-images;android-${API_LEVEL};google_apis;x86_64"
        shell: bash
        timeout-minutes: 20

      - name: Ensure adb available (debug)
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:$PATH"
          adb version
        shell: bash

      - name: Create & start Google AVD (minimal)
        run: |
          set -euxo pipefail
          export PATH="${ANDROID_SDK_ROOT}/emulator:${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}"
          AVD="${AVD_NAME}"

          # remove existing AVD if any
          avdmanager list avd | grep -q "$AVD" && yes | avdmanager delete avd -n "$AVD" || true

          # create AVD with google_apis x86_64 image
          echo "no" | avdmanager create avd --force --name "$AVD" \
            --package "system-images;android-${API_LEVEL};google_apis;x86_64" \
            --device "pixel"

          # start emulator headless, use SwiftShader to avoid host accelerator dependency
          nohup emulator -avd "$AVD" -no-window -no-audio -no-boot-anim -gpu swiftshader_indirect -wipe-data > emulator.log 2>&1 &

          # wait for emulator to be visible to adb
          for i in $(seq 1 60); do
            if adb devices | grep -q emulator-; then
              break
            fi
            sleep 1
          done

          # wait for Android to finish booting
          for i in $(seq 1 300); do
            BOOT=$(adb -s emulator-5554 shell getprop sys.boot_completed 2>/dev/null || echo "")
            if [ "$BOOT" = "1" ]; then
              echo "booted"
              break
            fi
            echo "waiting for boot ($i)..."
            sleep 2
          done

          adb devices -l
        shell: bash
        timeout-minutes: 30

      - name: Run Gradle validate (screenshot tests)
        run: |
          set -euxo pipefail
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          ./gradlew --no-daemon --console=plain validateDebugScreenshotTest
        shell: bash
        timeout-minutes: 30

      - name: Upload screenshots & reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: |
            app/src/debug/screenshotTest/reference/**
            app/build/reports/**
            app/build/test-results/**

      - name: Kill emulator (best-effort)
        if: always()
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          adb -s emulator-5554 emu kill || true
        shell: bash
