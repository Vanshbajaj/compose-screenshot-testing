name: Validate Compose Screenshots (macOS, default system image)

on:
  workflow_dispatch:
  push:
    branches:
      - '*'

jobs:
  validate:
    runs-on: macos-latest
    env:
      API_LEVEL: "35"
      AVD_NAME: "Test_AVD"
      ANDROID_SDK_ROOT: /Users/runner/Library/Android/sdk
      ANDROID_HOME: /Users/runner/Library/Android/sdk
      JAVA_VERSION: "17"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install Google's command-line tools + SDK (minimal)
        run: |
          set -euxo pipefail
          SDK_ROOT="${ANDROID_SDK_ROOT}"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"

          PLAT="mac"
          TOOLS_ZIP="commandlinetools-${PLAT}-9477386_latest.zip"
          TOOLS_URL="https://dl.google.com/android/repository/${TOOLS_ZIP}"

          if [ ! -f "$TOOLS_ZIP" ]; then
            echo "Downloading $TOOLS_URL"
            curl -fsSL -o "$TOOLS_ZIP" "$TOOLS_URL"
          else
            echo "$TOOLS_ZIP already present"
          fi

          rm -rf cmdline-tools-temp
          unzip -q -o "$TOOLS_ZIP" -d cmdline-tools-temp

          # Replace existing latest atomically
          rm -rf cmdline-tools/latest
          mkdir -p cmdline-tools
          mv cmdline-tools-temp/cmdline-tools cmdline-tools/latest
          rm -rf cmdline-tools-temp

          export PATH="$SDK_ROOT/cmdline-tools/latest/bin:$PATH"

          # Accept licenses robustly (ignore non-zero exit)
          yes | sdkmanager --licenses || true

          # Install minimal packages: platform-tools, platforms, build-tools and default system image
          sdkmanager --install "platform-tools" \
                       "platforms;android-${API_LEVEL}" \
                       "build-tools;33.0.2" \
                       "system-images;android-${API_LEVEL};default;x86_64"
        shell: bash
        timeout-minutes: 20

      - name: Verify adb available
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:$PATH"
          adb version
        shell: bash

      - name: Create & start AVD (robust, macOS)
        run: |
          set -euxo pipefail
          
          export PATH="${ANDROID_SDK_ROOT}/emulator:${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}"
          AVD_NAME="ci_avd"
          API_LEVEL="${API_LEVEL:-31}"
          SYS_IMG="system-images;android-${API_LEVEL};default;x86_64"
          DEVICE="pixel"
          
          echo "Using SYS_IMG=$SYS_IMG  AVD_NAME=$AVD_NAME"
          
          # delete previous AVD if present
          if avdmanager list avd | grep -q "^Name: ${AVD_NAME}$"; then
            echo "Deleting existing AVD ${AVD_NAME}"
            yes | avdmanager delete avd -n "$AVD_NAME" || true
          fi
          
          # create the AVD (noninteractive)
          echo "no" | avdmanager create avd --force --name "$AVD_NAME" --package "$SYS_IMG" --device "$DEVICE"
          
          # start emulator in background using host GPU (preferred on mac)
          nohup emulator -avd "$AVD_NAME" -no-window -no-audio -no-boot-anim -wipe-data -gpu host > emulator.log 2>&1 &
          EMU_PID=$!
          echo "Emulator pid: $EMU_PID; waiting for adb..."
          
          ADB="${ANDROID_SDK_ROOT}/platform-tools/adb"
          
          # wait for emulator to show up in adb devices
          for i in {1..120}; do
            sleep 1
            if $ADB devices | grep -q '^emulator-'; then
              echo "emulator listed by adb"
              break
            fi
            echo "waiting for adb listing ($i)..."
          done
          
          # ensure we have a device id (capture first emulator entry)
          EMU_ID=$($ADB devices | awk '/^emulator-/ {print $1; exit}')
          if [ -z "$EMU_ID" ]; then
            echo "No emulator device found. Dumping emulator.log and adb devices:"
            tail -n 200 emulator.log || true
            $ADB devices -l || true
            exit 1
          fi
          echo "Using device id: $EMU_ID"
          
          # wait-for-device (blocks until device present)
          $ADB -s "$EMU_ID" wait-for-device
          
          # wait for boot complete (poll several props)
          BOOTED=""
          for i in {1..600}; do
            BOOTED=$($ADB -s "$EMU_ID" shell getprop sys.boot_completed 2>/dev/null || echo "")
            if [ "$BOOTED" = "1" ]; then
              echo "sys.boot_completed=1"
              break
            fi
            DEV_BOOT=$($ADB -s "$EMU_ID" shell getprop dev.bootcomplete 2>/dev/null || echo "")
            BOOT_ANIM=$($ADB -s "$EMU_ID" shell getprop init.svc.bootanim 2>/dev/null || echo "")
            if [ "$DEV_BOOT" = "1" ] || [ "$BOOT_ANIM" = "stopped" ]; then
              echo "Fallback boot complete detected (dev.bootcomplete=$DEV_BOOT, bootanim=$BOOT_ANIM)"
              break
            fi
            if ! kill -0 $EMU_PID 2>/dev/null; then
              echo "Emulator process died. Dumping emulator.log:"
              tail -n 200 emulator.log || true
              $ADB devices -l || true
              exit 1
            fi
            if (( i % 30 == 0 )); then
              echo "still booting ($i). tail emulator.log:"
              tail -n 50 emulator.log || true
            fi
            sleep 2
          done
          
          if [ "$BOOTED" != "1" ] && [ "$DEV_BOOT" != "1" ] && [ "$BOOT_ANIM" != "stopped" ]; then
            echo "Emulator did not boot in time. Dumping emulator.log + adb devices:"
            tail -n 200 emulator.log || true
            $ADB devices -l || true
            exit 1
          fi
          
          echo "Disabling animations"
          $ADB -s "$EMU_ID" shell settings put global window_animation_scale 0
          $ADB -s "$EMU_ID" shell settings put global transition_animation_scale 0
          $ADB -s "$EMU_ID" shell settings put global animator_duration_scale 0
          
          echo "Emulator ready; devices:"
          $ADB devices -l
        shell: bash
        timeout-minutes: 40



      - name: Kill emulator (best-effort)
        if: always()
        run: |
          export PATH="${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          adb -s emulator-5554 emu kill || true
        shell: bash
